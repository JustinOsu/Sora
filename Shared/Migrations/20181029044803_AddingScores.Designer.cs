// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shared.Database;

namespace Shared.Migrations
{
    [DbContext(typeof(SoraContext))]
    [Migration("20181029044803_AddingScores")]
    partial class AddingScores
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Shared.Database.Models.Friends", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FriendId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("Shared.Database.Models.LeaderboardRx", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<ulong>("Count100Ctb");

                    b.Property<ulong>("Count100Mania");

                    b.Property<ulong>("Count100Osu");

                    b.Property<ulong>("Count100Taiko");

                    b.Property<ulong>("Count300Ctb");

                    b.Property<ulong>("Count300Mania");

                    b.Property<ulong>("Count300Osu");

                    b.Property<ulong>("Count300Taiko");

                    b.Property<ulong>("Count50Ctb");

                    b.Property<ulong>("Count50Mania");

                    b.Property<ulong>("Count50Osu");

                    b.Property<ulong>("Count50Taiko");

                    b.Property<ulong>("CountMissCtb");

                    b.Property<ulong>("CountMissMania");

                    b.Property<ulong>("CountMissOsu");

                    b.Property<ulong>("CountMissTaiko");

                    b.Property<double>("PeppyPointsCtb");

                    b.Property<double>("PeppyPointsMania");

                    b.Property<double>("PeppyPointsOsu");

                    b.Property<double>("PeppyPointsTaiko");

                    b.Property<ulong>("PlayCountCtb");

                    b.Property<ulong>("PlayCountMania");

                    b.Property<ulong>("PlayCountOsu");

                    b.Property<ulong>("PlayCountTaiko");

                    b.Property<ulong>("RankedScoreCtb");

                    b.Property<ulong>("RankedScoreMania");

                    b.Property<ulong>("RankedScoreOsu");

                    b.Property<ulong>("RankedScoreTaiko");

                    b.Property<ulong>("TotalScoreCtb");

                    b.Property<ulong>("TotalScoreMania");

                    b.Property<ulong>("TotalScoreOsu");

                    b.Property<ulong>("TotalScoreTaiko");

                    b.HasKey("Id");

                    b.ToTable("LeaderboardRx");
                });

            modelBuilder.Entity("Shared.Database.Models.LeaderboardStd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<ulong>("Count100Ctb");

                    b.Property<ulong>("Count100Mania");

                    b.Property<ulong>("Count100Osu");

                    b.Property<ulong>("Count100Taiko");

                    b.Property<ulong>("Count300Ctb");

                    b.Property<ulong>("Count300Mania");

                    b.Property<ulong>("Count300Osu");

                    b.Property<ulong>("Count300Taiko");

                    b.Property<ulong>("Count50Ctb");

                    b.Property<ulong>("Count50Mania");

                    b.Property<ulong>("Count50Osu");

                    b.Property<ulong>("Count50Taiko");

                    b.Property<ulong>("CountMissCtb");

                    b.Property<ulong>("CountMissMania");

                    b.Property<ulong>("CountMissOsu");

                    b.Property<ulong>("CountMissTaiko");

                    b.Property<double>("PeppyPointsCtb");

                    b.Property<double>("PeppyPointsMania");

                    b.Property<double>("PeppyPointsOsu");

                    b.Property<double>("PeppyPointsTaiko");

                    b.Property<ulong>("PlayCountCtb");

                    b.Property<ulong>("PlayCountMania");

                    b.Property<ulong>("PlayCountOsu");

                    b.Property<ulong>("PlayCountTaiko");

                    b.Property<ulong>("RankedScoreCtb");

                    b.Property<ulong>("RankedScoreMania");

                    b.Property<ulong>("RankedScoreOsu");

                    b.Property<ulong>("RankedScoreTaiko");

                    b.Property<ulong>("TotalScoreCtb");

                    b.Property<ulong>("TotalScoreMania");

                    b.Property<ulong>("TotalScoreOsu");

                    b.Property<ulong>("TotalScoreTaiko");

                    b.HasKey("Id");

                    b.ToTable("LeaderboardStd");
                });

            modelBuilder.Entity("Shared.Database.Models.LeaderboardTouch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<ulong>("Count100Ctb");

                    b.Property<ulong>("Count100Mania");

                    b.Property<ulong>("Count100Osu");

                    b.Property<ulong>("Count100Taiko");

                    b.Property<ulong>("Count300Ctb");

                    b.Property<ulong>("Count300Mania");

                    b.Property<ulong>("Count300Osu");

                    b.Property<ulong>("Count300Taiko");

                    b.Property<ulong>("Count50Ctb");

                    b.Property<ulong>("Count50Mania");

                    b.Property<ulong>("Count50Osu");

                    b.Property<ulong>("Count50Taiko");

                    b.Property<ulong>("CountMissCtb");

                    b.Property<ulong>("CountMissMania");

                    b.Property<ulong>("CountMissOsu");

                    b.Property<ulong>("CountMissTaiko");

                    b.Property<double>("PeppyPointsCtb");

                    b.Property<double>("PeppyPointsMania");

                    b.Property<double>("PeppyPointsOsu");

                    b.Property<double>("PeppyPointsTaiko");

                    b.Property<ulong>("PlayCountCtb");

                    b.Property<ulong>("PlayCountMania");

                    b.Property<ulong>("PlayCountOsu");

                    b.Property<ulong>("PlayCountTaiko");

                    b.Property<ulong>("RankedScoreCtb");

                    b.Property<ulong>("RankedScoreMania");

                    b.Property<ulong>("RankedScoreOsu");

                    b.Property<ulong>("RankedScoreTaiko");

                    b.Property<ulong>("TotalScoreCtb");

                    b.Property<ulong>("TotalScoreMania");

                    b.Property<ulong>("TotalScoreOsu");

                    b.Property<ulong>("TotalScoreTaiko");

                    b.HasKey("Id");

                    b.ToTable("LeaderboardTouch");
                });

            modelBuilder.Entity("Shared.Database.Models.Scores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Accuracy");

                    b.Property<short>("Count100");

                    b.Property<short>("Count300");

                    b.Property<short>("Count50");

                    b.Property<short>("CountGeki");

                    b.Property<short>("CountKatu");

                    b.Property<short>("CountMiss");

                    b.Property<DateTime>("Date");

                    b.Property<string>("FileMD5")
                        .IsRequired();

                    b.Property<short>("MaxCombo");

                    b.Property<uint>("Mods");

                    b.Property<double>("PeppyPoints");

                    b.Property<byte>("PlayMode");

                    b.Property<string>("ReplayMD5")
                        .IsRequired();

                    b.Property<string>("ScoreMD5")
                        .IsRequired();

                    b.Property<int>("TotalScore");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("Shared.Database.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("Privileges");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Shared.Database.Models.UserStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte>("CountryId");

                    b.HasKey("Id");

                    b.ToTable("UserStats");
                });

            modelBuilder.Entity("Shared.Database.Models.Scores", b =>
                {
                    b.HasOne("Shared.Database.Models.Users", "ScoreOwner")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
